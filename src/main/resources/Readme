Вы находитесь на странице кухни:

Вы переходите по URL http://localhost:8080/product/kitchen.

На этой странице отображается список товаров (кухонь), которые вы передали в модель через контроллер:

java
Copy
@GetMapping("/kitchen")
public String kitchen(Model model) {
    List<Product> products = productRepository.findByCategoryName("Кухни");
    model.addAttribute("kitchen", products);
    return "kitchen";
}
Список товаров на странице:

В вашем шаблоне kitchen.html используется Thymeleaf для отображения списка товаров:

html
Copy
<div class="product-card" th:each="product : ${kitchen}">
    <a th:href="@{/product/details(productId=${product.id})}">
        <!-- Содержимое карточки товара -->
    </a>
</div>
Run HTML
Здесь th:each проходит по каждому товару в списке kitchen, и для каждого товара создается ссылка.

Формирование ссылки:

Thymeleaf динамически формирует ссылку для каждого товара. Например, если product.id = 4, то ссылка будет выглядеть так:

html
Copy
<a href="/product/details?productId=4">
Run HTML
Когда вы нажимаете на эту ссылку, браузер отправляет GET-запрос на сервер по URL:

Copy
http://localhost:8080/product/details?productId=4
Обработка запроса на сервере:

Запрос обрабатывается методом getProductDetails в CategoryController:

java
Copy
@GetMapping("/details")
public String getProductDetails(@RequestParam("productId") Long productId, Model model) {
    Product product = productService.getProductById(productId);
    if (product != null) {
        model.addAttribute("product", product);
        return "product-details";
    } else {
        return "error";
    }
}
Этот метод извлекает productId из параметра запроса, находит товар в базе данных и передает его в шаблон product-details.html.